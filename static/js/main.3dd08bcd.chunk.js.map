{"version":3,"sources":["images/next.svg","images/back.svg","images/alert.svg","components/Header.js","components/Question.js","components/QuizPlay.js","components/Result.js","components/PlayArea.js","components/QuizProperty.js","components/Instructions.js","components/StartQuiz.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","React","Component","Question","props","renderHTML","rawHTML","createElement","dangerouslySetInnerHTML","__html","markAnswer","index","optionIndex","optionsClass","setState","state","choiceClass","prevProps","markedOption","this","undefined","question","quizFinished","correctAnswer","console","log","options","map","option","key","type","name","onClick","questionNumber","QuizPlay","fetchData","url","category","difficulty","fetch","then","response","json","data","questionStats","results","forEach","getOptions","optionsList","push","correctOptions","indexOf","correct_answer","questions","loading","timer","setInterval","tick","catch","error","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","incorrect_answers","concat","changeQuestionStat","nextQuestionIndex","activeQuestion","nextQuestion","prevQuestion","gotToQuestion","markedOptionsIndex","reviewQuestion","secondsLeft","parseInt","minsLeft","finishQuiz","toString","clearInterval","totalQuestionsAttended","totalCorrectAnswers","i","actionsButtonStat","findResult","Array","tryAgain","buttons","value","event","target","disabled","loaded","src","leftArrow","alt","rightArrow","Result","correctAnswers","incorrectAnswers","totalPoints","to","pathname","properties","PlayArea","totalQuestions","correct","location","component","QuizProperty","categoryHandle","difficultyHandle","categoryMap","Books","Film","Music","Television","Computers","Mathematics","Mythology","Sports","Geography","History","Politics","Art","Celebrities","Animals","Vehicles","Comics","Gadgets","htmlFor","DropdownButton","id","variant","title","Object","keys","Dropdown","Item","eventKey","onSelect","Button","alertIcon","Instructions","StartQuiz","MainComponent","startQuiz","exact","path","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3dd08bcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/next.d341d700.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.0e3ae76b.svg\";","module.exports = __webpack_public_path__ + \"static/media/alert.4f6abd89.svg\";","// Header component - storing heading \nimport React from 'react'\n\nclass Header extends React.Component {\n    render() {\n        return(\n            <div className=\"header\">\n                <h1>Online Quiz</h1>\n            </div>\n        )\n    }\n}\nexport default Header","import React from \"react\";\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.optionIndex = [\"A\", \"B\", \"C\", \"D\"];\n    this.state = {\n      optionsClass: [\"\", \"\", \"\", \"\"],\n      choiceClass: [\"\", \"\", \"\", \"\"],\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.markedOption !== this.props.markedOption) {\n      var optionsClass = [\"\", \"\", \"\", \"\"];\n      if (this.props.markedOption !== undefined)\n        optionsClass[this.props.markedOption] = \"click\";\n      this.setState({ optionsClass: optionsClass });\n    }\n    if (\n      (prevProps.question !== this.props.question &&\n        this.props.quizFinished === true) ||\n      prevProps.quizFinished !== this.props.quizFinished\n    ) {\n      var choiceClass = [\"\", \"\", \"\", \"\"];\n      choiceClass[this.props.markedOption] = \"incorrect-choice\";\n      choiceClass[this.props.correctAnswer] = \"correct-choice\";\n      this.setState({ choiceClass: choiceClass });\n    }\n  }\n\n  renderHTML = (rawHTML) =>\n    React.createElement(\"span\", {\n      dangerouslySetInnerHTML: { __html: rawHTML },\n    });\n\n  markAnswer = (index, optionIndex) => {\n    var optionsClass = [\"\", \"\", \"\", \"\"];\n    optionsClass[optionIndex] = \"click\";\n    this.setState({ optionsClass: optionsClass });\n    this.props.markAnswer(index, optionIndex);\n  };\n\n  render() {\n    console.log();\n    return (\n      <div className=\"question\">\n        <p className=\"question-text\">{this.renderHTML(this.props.question)}</p>\n        {this.props.options.map((option, index) => (\n          <div\n            className={`option-div ${this.state.choiceClass[index]}`}\n            key={index}\n          >\n            <label className={`choice ${this.state.optionsClass[index]}`}>\n              {this.renderHTML(option)}\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                onClick={() =>\n                  this.markAnswer(this.props.questionNumber, index)\n                }\n              />\n              <span className=\"checkmark\">{this.optionIndex[index]}</span>\n            </label>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React from \"react\";\nimport Question from \"./Question\";\nimport rightArrow from \"../images/next.svg\";\nimport leftArrow from \"../images/back.svg\";\nimport Loader from \"react-loader\";\n\nclass QuizPlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeQuestion: 0,\n      questions: [],\n      markedOptionsIndex: new Array(20),\n      questionStats: new Array(20),\n      minsLeft: \"2\",\n      secondsLeft: \"00\",\n      quizFinished: false,\n      actionsButtonStat: false,\n      loading: false,\n    };\n    this.correctOptions = [];\n    this.optionsList = [];\n    this.timer = null;\n  }\n\n  fetchData = () => {\n    let url = `https://opentdb.com/api.php?amount=20&type=multiple&category=${this.props.category}&difficulty=${this.props.difficulty}`;\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        //set the first question status to active\n        var questionStats = this.state.questionStats;\n        questionStats[0] = \"active-question\";\n\n        //store the correct answers\n        data.results.forEach((question) => {\n          var options = this.getOptions(question);\n          this.optionsList.push(options);\n          this.correctOptions.push(options.indexOf(question.correct_answer));\n        });\n        this.setState({\n          questions: data.results,\n          questionStats: questionStats,\n          loading: true,\n        });\n        this.timer = setInterval(this.tick, 1000);\n      })\n      .catch((error) =>\n        console.log(\"Error occurred while fetching questions\", error)\n      );\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.tryAgain !== this.props.tryAgain){\n      this.setState({\n        activeQuestion: 0,\n        questions: [],\n        markedOptionsIndex: new Array(20),\n        questionStats: new Array(20),\n        minsLeft: \"2\",\n        secondsLeft: \"00\",\n        quizFinished: false,\n        actionsButtonStat: false,\n        loading: false,\n      });\n      this.correctOptions = [];\n      this.optionsList = [];\n      clearInterval(this.timer)\n      this.fetchData();\n    } \n  }\n\n  shuffle = (array) => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  getOptions = (question) => {\n    var options = question.incorrect_answers;\n    options = options.concat([question.correct_answer]);\n    options = this.shuffle(options);\n    return options;\n  };\n\n  changeQuestionStat = (nextQuestionIndex) => {\n    var questionStats = this.state.questionStats;\n    if (questionStats[this.state.activeQuestion] === \"active-question\")\n      questionStats[this.state.activeQuestion] = undefined;\n    if (questionStats[nextQuestionIndex] === undefined)\n      questionStats[nextQuestionIndex] = \"active-question\";\n\n    this.setState({\n      activeQuestion: nextQuestionIndex,\n      questionStats: questionStats,\n    });\n  };\n\n  nextQuestion = () => {\n    if (this.state.questions.length - 1 !== this.state.activeQuestion) {\n      this.changeQuestionStat(this.state.activeQuestion + 1);\n    }\n  };\n\n  prevQuestion = () => {\n    if (this.state.activeQuestion !== 0) {\n      this.changeQuestionStat(this.state.activeQuestion - 1);\n    }\n  };\n\n  gotToQuestion = (index) => {\n    this.changeQuestionStat(index);\n  };\n\n  markAnswer = (index, optionIndex) => {\n    var markedOptionsIndex = this.state.markedOptionsIndex;\n    markedOptionsIndex[index] = optionIndex;\n\n    var questionStats = this.state.questionStats;\n    questionStats[index] = \"marked-question\";\n    this.setState({\n      markedOptionsIndex: markedOptionsIndex,\n      questionStats: questionStats,\n    });\n  };\n\n  reviewQuestion = () => {\n    var questionStats = this.state.questionStats;\n    questionStats[this.state.activeQuestion] = \"review-question\";\n    this.setState({\n      questionStats: questionStats,\n    });\n  };\n\n  tick = () => {\n    var secondsLeft = parseInt(this.state.secondsLeft);\n    var minsLeft = parseInt(this.state.minsLeft);\n    if (secondsLeft === 0) {\n      if (minsLeft === 0) this.finishQuiz();\n      else {\n        minsLeft = minsLeft - 1;\n        secondsLeft = 59;\n      }\n    } else {\n      secondsLeft = (secondsLeft - 1).toString();\n      if (secondsLeft.length === 1) secondsLeft = \"0\" + secondsLeft;\n    }\n    this.setState({ minsLeft: minsLeft, secondsLeft: secondsLeft });\n  };\n\n  finishQuiz = () => {\n    clearInterval(this.timer);\n    var questionStats = this.state.questionStats;\n    var totalQuestionsAttended = 0;\n    var totalCorrectAnswers = 0;\n\n    //mark attended question correct or incorrect\n    for (var i = 0; i < 20; i++) {\n      if (this.correctOptions[i] === this.state.markedOptionsIndex[i]) {\n        questionStats[i] = \"correct-question\";\n        totalCorrectAnswers += 1;\n      } else if (\n        this.correctOptions[i] !== this.state.markedOptionsIndex[i] &&\n        this.state.markedOptionsIndex[i] !== undefined\n      ) {\n        questionStats[i] = \"incorrect-question\";\n        totalQuestionsAttended += 1;\n      }\n    }\n    this.setState({\n      questionStats: questionStats,\n      quizFinished: true,\n      actionsButtonStat: true,\n    });\n\n    this.props.findResult(\n      totalQuestionsAttended + totalCorrectAnswers,\n      totalCorrectAnswers\n    );\n  };\n\n  render() {\n    const buttons = [];\n    for (let i = 1; i <= 20; i++) {\n      buttons.push(\n        <button\n          key={i}\n          value={i}\n          onClick={(event) => this.gotToQuestion(event.target.value - 1)}\n          className={`${this.state.questionStats[i - 1]}`}\n        >\n          {i}\n        </button>\n      );\n    }\n\n    return (\n      <div className=\"quiz-play\">\n        <div className=\"question-navigation-area\">{buttons}</div>\n\n        <div className=\"question-marking-indication\">\n          <div className=\"answered-div\">\n            <div className=\"rectangle\"></div>\n            <p>Answered</p>\n          </div>\n\n          <div className=\"review-div\">\n            <div className=\"rectangle\"></div>\n            <p>Review</p>\n          </div>\n\n          <div className=\"correct-div\">\n            <div className=\"rectangle\"></div>\n            <p>Correct</p>\n          </div>\n\n          <div className=\"incorrect-div\">\n            <div className=\"rectangle\"></div>\n            <p>Incorrect</p>\n          </div>\n\n          <div className=\"active-div\">\n            <div className=\"rectangle\"></div>\n            <p>Active</p>\n          </div>\n\n          <div className=\"unattended-div\">\n            <div className=\"rectangle\"></div>\n            <p>Not answered</p>\n          </div>\n        </div>\n\n        <div className=\"action-button-div\">\n          <button\n            className=\"review-button\"\n            onClick={this.reviewQuestion}\n            disabled={this.state.actionsButtonStat}\n          >\n            Mark question for Review\n          </button>\n          <button\n            className=\"finish-button\"\n            onClick={this.finishQuiz}\n            disabled={this.state.actionsButtonStat}\n          >\n            Finish Quiz\n          </button>\n        </div>\n\n        <div className=\"question-detail-div\">\n          <p className=\"question-number\">\n            Question {this.state.activeQuestion + 1} of 20\n          </p>\n          <p className=\"total-time\">\n            0{this.state.minsLeft}:{this.state.secondsLeft}s\n          </p>\n        </div>\n\n        <hr />\n\n        <Loader loaded={this.state.loading}>\n          {this.state.questions.length > 0 && (\n            <Question\n              question={\n                this.state.questions[this.state.activeQuestion].question\n              }\n              options={this.optionsList[this.state.activeQuestion]}\n              questionNumber={this.state.activeQuestion}\n              markAnswer={(index, optionIndex) =>\n                this.markAnswer(index, optionIndex)\n              }\n              markedOption={\n                this.state.markedOptionsIndex[this.state.activeQuestion]\n              }\n              correctAnswer={this.correctOptions[this.state.activeQuestion]}\n              quizFinished={this.state.quizFinished}\n            />\n          )}\n        </Loader>\n\n        <div className=\"question-navigation-div\">\n          <div className=\"prev-button-div\">\n            <button className=\"prev-button\" onClick={this.prevQuestion}>\n              <img src={leftArrow} alt=\"previous icon\" />\n              Previous\n            </button>\n          </div>\n\n          <div className=\"next-button-div\">\n            <button className=\"next-button\" onClick={this.nextQuestion}>\n              Next\n              <img src={rightArrow} alt=\"next icon\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default QuizPlay;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Result extends React.Component {\n  render() {\n    return (\n      <div className=\"result\">\n        <div className=\"counts\">\n          <div className=\"question-count\">\n            <p className=\"count-text\">20</p>\n            <p className=\"indication-text\">Questions</p>\n          </div>\n\n          <div className=\"point-count\">\n            <p className=\"count-text\">60</p>\n            <p className=\"indication-text\">Points</p>\n          </div>\n\n          <div className=\"time-count\">\n            <p className=\"count-text\">2</p>\n            <p className=\"indication-text\">Minutes</p>\n          </div>\n        </div>\n\n        <div className=\"statitics\">\n          <h2>Quiz Result</h2>\n          <p>\n            Total questions attented:{\" \"}\n            <span>{this.props.totalQuestionsAttended}</span>\n          </p>\n          <p>\n            Correct answers: <span>{this.props.correctAnswers}</span>\n          </p>\n          <p>\n            Incorrect answers: <span>{this.props.incorrectAnswers}</span>\n          </p>\n          <p>\n            Total points: <span>{this.props.totalPoints}</span>\n          </p>\n        </div>\n\n        <div className=\"inspiration-div\">\n          <p>\n            Focus on the question and try get the answeres as quickly as\n            possible.\n          </p>\n        </div>\n\n        <div className=\"new-game-button-div\">\n          <Link\n            to={{\n              pathname: \"/play\",\n              properties: {\n                category: this.props.category,\n                difficulty: this.props.difficulty,\n                tryAgain: !this.props.tryAgain,\n              },\n            }}\n          >\n            <button className=\"try-again-button\">Try Again</button>\n          </Link>\n          <Link to=\"/\">\n            <button className=\"home-button\">\n              <i className=\"fas fa-home\"></i>\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Result;\n","import React from \"react\";\nimport QuizPlay from \"./QuizPlay\";\nimport Result from \"./Result\";\nimport { Redirect } from \"react-router-dom\";\n\nclass PlayArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalQuestionsAttended: 0,\n      correctAnswers: 0,\n      incorrectAnswers: 0,\n      totalPoints: 0,\n    };\n    this.category = \"\";\n    this.difficulty = \"\";\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.location.properties.tryAgain !==\n      this.props.location.properties.tryAgain\n    )\n      this.findResult(0, 0);\n  }\n\n  findResult = (totalQuestions, correct) => {\n    var totalPoints = correct * 3 - (totalQuestions - correct);\n    this.setState({\n      totalQuestionsAttended: totalQuestions,\n      correctAnswers: correct,\n      incorrectAnswers: totalQuestions - correct,\n      totalPoints: totalPoints,\n    });\n  };\n\n  render() {\n    let component;\n    if (this.props.location.properties === undefined)\n      component = <Redirect to=\"/\" />;\n    else\n      component = (\n        <div className=\"play-area\">\n          <QuizPlay\n            category={this.props.location.properties.category}\n            difficulty={this.props.location.properties.difficulty}\n            tryAgain={this.props.location.properties.tryAgain}\n            findResult={(totalQuestions, correct) =>\n              this.findResult(totalQuestions, correct)\n            }\n          />\n          <Result\n            totalQuestionsAttended={this.state.totalQuestionsAttended}\n            correctAnswers={this.state.correctAnswers}\n            incorrectAnswers={this.state.incorrectAnswers}\n            totalPoints={this.state.totalPoints}\n            category={this.props.location.properties.category}\n            difficulty={this.props.location.properties.difficulty}\n            tryAgain={this.props.location.properties.tryAgain}\n          />\n        </div>\n      );\n    return <>{component}</>;\n  }\n}\nexport default PlayArea;\n","import React from \"react\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Button from \"react-bootstrap/Button\";\nimport alertIcon from \"../images/alert.svg\";\nimport { Link } from \"react-router-dom\";\n\nclass QuizProperty extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"General Knowledge\",\n      difficulty: \"easy\",\n    };\n\n    this.categoryMap = {\n      \"General Knowledge\": \"9\",\n      Books: \"10\",\n      Film: \"11\",\n      Music: \"12\",\n      \"Musicals and Theatres\": \"13\",\n      Television: \"14\",\n      \"Video Games\": \"15\",\n      \"Board Games\": \"16\",\n      \"Science and Nature\": \"17\",\n      Computers: \"18\",\n      Mathematics: \"19\",\n      Mythology: \"20\",\n      Sports: \"21\",\n      Geography: \"22\",\n      History: \"23\",\n      Politics: \"24\",\n      Art: \"25\",\n      Celebrities: \"26\",\n      Animals: \"27\",\n      Vehicles: \"28\",\n      Comics: \"29\",\n      Gadgets: \"30\",\n      \"Japanese Anime and Manga\": \"31\",\n      \"Cartoon and Animations\": \"32\",\n    };\n  }\n\n  categoryHandle = (event) => {\n    this.setState({ category: event });\n  };\n\n  difficultyHandle = (event) => {\n    this.setState({ difficulty: event });\n  };\n\n  render() {\n    return (\n      <div className=\"quiz-property\">\n        <div className=\"category-div\">\n          <label htmlFor=\"dropdown-variants-Primary\">Select category</label>\n          <DropdownButton\n            key=\"Primary\"\n            id=\"dropdown-variants-Primary\"\n            variant=\"primary\"\n            title={this.state.category}\n          >\n            {Object.keys(this.categoryMap).map((category, key) => (\n              <Dropdown.Item\n                eventKey={category}\n                onSelect={this.categoryHandle}\n                key={key}\n              >\n                {category}\n              </Dropdown.Item>\n            ))}\n          </DropdownButton>\n        </div>\n\n        <div className=\"difficulty-div\">\n          <label htmlFor=\"dropdown-variants-Primary\">\n            Select difficulty level\n          </label>\n          <DropdownButton\n            key=\"Primary\"\n            id=\"dropdown-variants-Primary\"\n            variant=\"primary\"\n            title={this.state.difficulty}\n          >\n            <Dropdown.Item eventKey=\"easy\" onSelect={this.difficultyHandle}>\n              Easy\n            </Dropdown.Item>\n            <Dropdown.Item eventKey=\"medium\" onSelect={this.difficultyHandle}>\n              Medium\n            </Dropdown.Item>\n            <Dropdown.Item eventKey=\"hard\" onSelect={this.difficultyHandle}>\n              Hard\n            </Dropdown.Item>\n          </DropdownButton>\n        </div>\n\n        <div className=\"button-div\">\n          <Link\n            to={{\n              pathname: \"/play\",\n              properties: {\n                category: this.categoryMap[this.state.category],\n                difficulty: this.state.difficulty,\n                tryAgain: false,\n              },\n            }}\n            className=\"start-quiz-button-link\"\n          >\n            <Button variant=\"outline-primary\">Start Quiz</Button>\n          </Link>\n\n          <p className=\"start-instructions\">\n            <img\n              src={alertIcon}\n              alt=\"notification icon\"\n              className=\"alert-icon\"\n            />\n            Quiz starts immediately after you press the start button. Read the\n            instructions carefully before clicking the start button.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuizProperty;\n","import React from \"react\";\n\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div className=\"instructions\">\n        <h2>Read the instructions carefully before starting the quiz</h2>\n        <ul>\n          <li>\n            There are 20 questions in each quiz and 2 minute time to answer it\n          </li>\n          <li>\n            You can finish the quiz before the time is up by clicking the finish\n            quiz button at the top\n          </li>\n          <li>\n            Each right answer carries 3 point and each incorrect answer carries\n            -1 point\n          </li>\n          <li>Unattended questions carry zero point</li>\n          <li>Quiz finishes automatically when the time is up</li>\n          <li>\n            Once you mark any question it cannot be unmarked, you can mark any\n            other answer but cannot leave that question unattented\n          </li>\n          <li>\n            Even if you finish the test before the time is up, point calculation will\n            be based only on the correct and incorrect answers only. Time is not\n            a factor in the calculation of points\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default Instructions;\n","import React from \"react\";\nimport QuizProperty from \"./QuizProperty\";\nimport Instructions from \"./Instructions\";\n\nclass StartQuiz extends React.Component {\n  render() {\n    return (\n      <div className=\"start-quiz\">\n        <QuizProperty />\n        <Instructions />\n      </div>\n    );\n  }\n}\nexport default StartQuiz;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport PlayArea from \"./PlayArea\";\nimport StartQuiz from \"./StartQuiz\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startQuiz: false,\n    };\n    this.category = \"\";\n    this.difficulty = \"\";\n  }\n\n  startQuiz = (category, difficulty) => {\n    this.category = category;\n    this.difficulty = difficulty;\n    this.setState({ startQuiz: true });\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <div className=\"main\">\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={StartQuiz} />\n              <Route exact path=\"/quiz-app\" component={StartQuiz} />\n              <Route path=\"/quiz-app/play\" component={PlayArea} />\n            </Switch>\n          </Router>\n        </div>\n      </>\n    );\n  }\n}\nexport default MainComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./components/MainComponent\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}